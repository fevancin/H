# Modello che rappresenta il punto di partenza per la configurazione di ogni
# risoluzione.
base:
  # Elenco di nomi dei soli gruppi da risolvere (inserisci nella lista 'all'
  # per eseguire tutti i gruppi)
  groups_to_do: []
  groups_to_avoid: [] # Elenco dei gruppi di istanze da non risolvere

  # Numero di iterazioni dopo il quale la computazione viene fermata
  max_iteration_number: 10000

  # Se dopo una iterazione il master tiene in memoria i valori delle variabili
  # della soluzione precedente
  warm_start_master: true

  # Se la soluzione del master e quella dei sottoproblemi differisce di questa
  # percentuale o meno la risoluzione viene fermata (0.0 per disattivare il
  # controllo)
  early_stop_percentage_between_master_and_subproblem: 0.0

  # Se ogni controllo di correttezza termina la computazione anzichè scrivere
  # solamente un errore a terminale
  checks_throw_exceptions: true

  # Specifica del tipo di core ('generalist', 'basic', 'reduced')
  core_type: 'reduced'

  # Che tipo di espansione dei core effettuare
  expand_core_days: false
  expand_core_patients: false
  expand_core_services: false

  # Numero massimo di core che possono essere creati a partire da uno di essi
  max_expansions_per_core: 50

  master_config:
    model: 'slim-master' # 'fat-master', 'slim-master'
    solver: 'gurobi'
    time_limit: 3600 # in secondi
    max_memory: 16 # in GB

  subproblem_config:
    model: 'fat-subproblem' # 'fat-subproblem', 'slim-subproblem'
    solver: 'gurobi'
    time_limit: 3600 # in secondi
    max_memory: 16 # in GB

  additional_master_info:
  - 'minimize_hospital_accesses'
  # - 'use_bin_packing' # inutile nell'implementazione attuale...

  additional_subproblem_info:
  - 'none'

# Ogni elemento in questo oggetto corrisponde ad un differente processo di
# risoluzione. Ciò che compare viene aggiunto o sovrascritto ogni volta a copie
# della configurazione di base.
groups:

  # Primo test: tipo di core
  generalist_no_exp:
    groups_to_do: ['all']
    groups_to_avoid: ['32pat_4cu_2op_10like', '32pat_4cu_2op_25like', '32pat_4cu_2op_50like', '64pat_4cu_2op_10like', '64pat_4cu_2op_25like', '64pat_4cu_2op_50like']
    core_type: 'generalist'
  
  basic_no_exp:
    groups_to_do: ['all']
    groups_to_avoid: ['32pat_4cu_2op_10like', '32pat_4cu_2op_25like', '32pat_4cu_2op_50like', '64pat_4cu_2op_10like', '64pat_4cu_2op_25like', '64pat_4cu_2op_50like']
    core_type: 'basic'
  
  reduced_no_exp:
    groups_to_do: ['all']
    groups_to_avoid: []
    core_type: 'reduced'


  # Secondo test: tipo di espansione
  reduced_with_exp_ps:
    groups_to_do: ['all']
    groups_to_avoid: []
    core_type: 'reduced'
    expand_core_patients: true
    expand_core_services: true
  
  reduced_with_exp_psd:
    groups_to_do: ['all']
    groups_to_avoid: ['32pat_4cu_2op_10like', '32pat_4cu_2op_25like', '32pat_4cu_2op_50like', '64pat_4cu_2op_10like', '64pat_4cu_2op_25like', '64pat_4cu_2op_50like']
    core_type: 'reduced'
    expand_core_days: true
    expand_core_patients: true
    expand_core_services: true
  

  # Terso test: presenza dei vincoli di ottimalità
  generalist_no_exp_opt_constr:
    groups_to_do: ['all']
    groups_to_avoid: ['32pat_4cu_2op_10like', '32pat_4cu_2op_25like', '32pat_4cu_2op_50like', '64pat_4cu_2op_10like', '64pat_4cu_2op_25like', '64pat_4cu_2op_50like']
    core_type: 'generalist'
    additional_master_info:
    - 'use_optimality_constraints'
  
  basic_no_exp_opt_constr:
    groups_to_do: ['all']
    groups_to_avoid: ['32pat_4cu_2op_10like', '32pat_4cu_2op_25like', '32pat_4cu_2op_50like', '64pat_4cu_2op_10like', '64pat_4cu_2op_25like', '64pat_4cu_2op_50like']
    core_type: 'basic'
    additional_master_info:
    - 'use_optimality_constraints'
  
  reduced_no_exp_opt_constr:
    groups_to_do: ['all']
    groups_to_avoid: ['32pat_4cu_2op_10like', '32pat_4cu_2op_25like', '32pat_4cu_2op_50like', '64pat_4cu_2op_10like', '64pat_4cu_2op_25like', '64pat_4cu_2op_50like']
    core_type: 'reduced'
    additional_master_info:
    - 'use_optimality_constraints'

# '32pat_4cu_2op', '64pat_4cu_2op', '128pat_4cu_2op'

# '32pat_1cu_8op', '32pat_2cu_4op', '32pat_4cu_2op', '32pat_8cu_1op'
# '64pat_1cu_8op', '64pat_2cu_4op', '64pat_4cu_2op', '64pat_8cu_1op'

# '32pat_4cu_2op_10like', '32pat_4cu_2op_25like', '32pat_4cu_2op_50like'
# '64pat_4cu_2op_10like', '64pat_4cu_2op_25like', '64pat_4cu_2op_50like'