# Modello che rappresenta il punto di partenza per la configurazione di ogni
# risoluzione.
base:
  # Elenco di nomi dei soli gruppi da risolvere (inserisci nella lista 'all'
  # per eseguire tutti i gruppi)
  groups_to_do: []
  groups_to_avoid: [] # Elenco dei gruppi di istanze da non risolvere

  # Numero di iterazioni dopo il quale la computazione viene fermata
  max_iteration_number: 100

  # Se dopo una iterazione il master tiene in memoria i valori delle variabili
  # della soluzione precedente
  warm_start_master: true

  # Se la soluzione del master e quella dei sottoproblemi differisce di questa
  # percentuale o meno la risoluzione viene fermata (0.0 per disattivare il
  # controllo)
  early_stop_percentage_between_master_and_subproblem: 0.0

  # Se ogni controllo di correttezza termina la computazione anzichè scrivere
  # solamente un errore a terminale
  checks_throw_exceptions: true

  # Specifica del tipo di core ('generalist', 'basic', 'reduced')
  core_type: 'reduced'

  # Che tipo di espansione dei core effettuare
  expand_core_days: false
  expand_core_patients: false
  expand_core_services: false

  # Numero massimo di core che possono essere creati a partire da uno di essi
  max_expansions_per_core: 50

  # Se utilizzare la ricerca di permutazioni di soluzioni del sottoproblema per
  # raggiungere il valore ottimista del master
  use_solution_permutation: false

  master_config:
    model: 'slim-master' # 'fat-master', 'slim-master'
    solver: 'gurobi'
    time_limit: 1200 # in secondi
    max_memory: 16 # in GB

  subproblem_config:
    model: 'fat-subproblem' # 'fat-subproblem', 'slim-subproblem'
    solver: 'gurobi'
    time_limit: 600 # in secondi
    max_memory: 16 # in GB

  additional_master_info:
  - 'minimize_hospital_accesses'
  # - 'use_bin_packing' # inutile nell'implementazione attuale...

  additional_subproblem_info:
  - 'use_redundant_operator_cut'

# Ogni elemento in questo oggetto corrisponde ad un differente processo di
# risoluzione. Ciò che compare viene aggiunto o sovrascritto ogni volta a copie
# della configurazione di base.
groups:

  # # Test sul tipo di core con permutazione delle soluzioni
  # generalist_no_exp:
  #   groups_to_do: ['32pat_4cu_2op', '64pat_4cu_2op']
  #   core_type: 'generalist'
  #   use_solution_permutation: true
  
  # basic_no_exp:
  #   groups_to_do: ['32pat_4cu_2op', '64pat_4cu_2op']
  #   core_type: 'basic'
  #   use_solution_permutation: true
  
  # reduced_no_exp:
  #   groups_to_do: ['32pat_4cu_2op', '64pat_4cu_2op']
  #   core_type: 'reduced'
  #   use_solution_permutation: true
  

  # # Test sul tipo di espansione con permutazione delle soluzioni
  # reduced_with_exp_ps:
  #   groups_to_do: ['32pat_4cu_2op', '64pat_4cu_2op']
  #   expand_core_patients: true
  #   expand_core_services: true
  #   use_solution_permutation: true
  
  # reduced_with_exp_psd:
  #   groups_to_do: ['32pat_4cu_2op', '64pat_4cu_2op']
  #   expand_core_days: true
  #   expand_core_patients: true
  #   expand_core_services: true
  #   use_solution_permutation: true


  # # Test sul tipo di core senza permutazione delle soluzioni
  # generalist_no_exp:
  #   groups_to_do: ['32pat_4cu_2op', '64pat_4cu_2op']
  #   core_type: 'generalist'
  
  # basic_no_exp:
  #   groups_to_do: ['32pat_4cu_2op', '64pat_4cu_2op']
  #   core_type: 'basic'
  
  # reduced_no_exp:
  #   groups_to_do: ['32pat_4cu_2op', '64pat_4cu_2op']
  #   core_type: 'reduced'
  
  
  # # Test sul tipo di espansione senza permutazione delle soluzioni
  # reduced_with_exp_ps:
  #   groups_to_do: ['32pat_4cu_2op', '64pat_4cu_2op']
  #   expand_core_patients: true
  #   expand_core_services: true
  
  # reduced_with_exp_psd:
  #   groups_to_do: ['32pat_4cu_2op', '64pat_4cu_2op']
  #   expand_core_days: true
  #   expand_core_patients: true
  #   expand_core_services: true
  

  # # Test sulla presenza dei vincoli di ottimalità
  # generalist_no_exp_opt_constr:
  #   groups_to_do: ['32pat_2cu_4op', '64pat_2cu_4op']
  #   core_type: 'generalist'
  #   additional_master_info:
  #   - 'use_optimality_constraints'
  
  # basic_no_exp_opt_constr:
  #   groups_to_do: ['32pat_2cu_4op', '64pat_2cu_4op']
  #   core_type: 'basic'
  #   additional_master_info:
  #   - 'use_optimality_constraints'
  
  # reduced_no_exp_opt_constr:
  #   groups_to_do: ['32pat_2cu_4op', '64pat_2cu_4op']
  #   core_type: 'reduced'
  #   additional_master_info:
  #   - 'use_optimality_constraints'

  # small_solving:
  #   groups_to_do: ['32pat_2cu_4op']

  strongest_solver:
    groups_to_do: ['32pat_4cu_2op', '64pat_4cu_2op']
    core_type: 'reduced'
    expand_core_patients: true
    expand_core_services: true
    use_solution_permutation: true
    additional_master_info:
    - 'use_optimality_constraints'
  
  strongest_but_no_perm:
    groups_to_do: ['32pat_4cu_2op', '64pat_4cu_2op']
    core_type: 'reduced'
    expand_core_patients: true
    expand_core_services: true
    use_solution_permutation: false
    additional_master_info:
    - 'use_optimality_constraints'

# '128pat_4cu_2op',
# '32pat_1cu_8op', '32pat_2cu_4op', '32pat_4cu_2op', '32pat_8cu_1op',
# '64pat_1cu_8op', '64pat_2cu_4op', '64pat_4cu_2op', '64pat_8cu_1op',
# '32pat_4cu_2op_10like', '32pat_4cu_2op_25like', '32pat_4cu_2op_50like',
# '64pat_4cu_2op_10like', '64pat_4cu_2op_25like', '64pat_4cu_2op_50like'